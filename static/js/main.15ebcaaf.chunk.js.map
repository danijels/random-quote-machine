{"version":3,"sources":["components/button.js","components/quoteBox.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","onClick","handleClick","id","style","value","QuoteBox","quote","author","App","state","color","href","newQuote","bind","this","fetch","then","response","json","data","random","randomIndex","quotes","length","setState","colors","encodedQuote","encodeURIComponent","backgroundColorStyle","backgroundColor","target","icon","faTwitter","React","Math","floor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAYeA,EAVA,SAACC,GAAD,OACX,wBACCC,QAASD,EAAME,YACbC,GAAIH,EAAMG,GACVC,MAAOJ,EAAMI,MAHhB,SAKKJ,EAAMK,SCaAC,EAnBE,SAACN,GAAD,OACb,sBACCG,GAAIH,EAAMG,GADX,UAGI,oBACCA,GAAG,QACHC,MAAOJ,EAAMI,MAFd,cAIGJ,EAAMO,MAJT,OAMA,oBACCJ,GAAG,SACHC,MAAOJ,EAAMI,MAFd,eAIIJ,EAAMQ,cCyDHC,G,wDAhEX,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IACDU,MAAQ,CACTH,MAAO,GACPC,OAAQ,GACRG,MAAO,GACPC,KAAM,IAEd,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBARG,E,qDAUnB,WACIC,KAAKF,a,sBAET,WAAY,IAAD,OAEPG,MADY,0IAEXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IAAMC,EAASC,EAAYF,EAAKG,OAAOC,QACvC,EAAKC,SAAS,CACVlB,MAAOa,EAAKG,OAAOF,GAAQd,MAC3BC,OAAQY,EAAKG,OAAOF,GAAQb,OAC5BG,MAAOe,EAAOJ,EAAYI,EAAOF,cAGzC,IAAMG,EAAeC,mBAAmB,GAAD,OAAIb,KAAKL,MAAMH,MAAf,YAAwBQ,KAAKL,MAAMF,SACpEI,EAAI,gEAA4De,GACtEZ,KAAKU,SAAS,CACVb,KAAMA,M,oBAId,WACI,IAAMiB,EAAuB,CACzBC,gBAAiBf,KAAKL,MAAMC,OAEhC,OACI,qBAAKR,GAAG,UAAUC,MAAOyB,EAAzB,SACI,sBAAK1B,GAAG,YAAR,UACI,cAAC,EAAD,CAAUI,MAAOQ,KAAKL,MAAMH,MACxBC,OAAQO,KAAKL,MAAMF,OACnBL,GAAG,OACHC,MAAO,CAACO,MAAOI,KAAKL,MAAMC,SAE9B,sBAAKR,GAAG,UAAR,UACI,mBAAGS,KAAMG,KAAKL,MAAME,KAChBmB,OAAO,OACP5B,GAAG,cACHC,MAAOyB,EAHX,SAKI,cAAC,IAAD,CAAiBG,KAAMC,QAE3B,cAAC,EAAD,CAAQ9B,GAAG,YACPD,YAAaa,KAAKF,SAClBR,MAAM,YACND,MAAOyB,gB,GAxDjBK,cAmEZR,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGF,SAASJ,EAAYE,GACjB,OAAOW,KAAKC,MAAMD,KAAKd,SAAYG,GC3FvC,IAYea,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.15ebcaaf.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\nconst Button = (props) => (\r\n    <button \r\n    \tonClick={props.handleClick} \r\n      \tid={props.id}\r\n      \tstyle={props.style}\r\n    >\r\n        {props.value}\r\n    </button>\r\n );\r\n\r\nexport default Button\r\n    ","import * as React from 'react'\r\n\r\nconst QuoteBox = (props) => (\r\n    <div \r\n    \tid={props.id}\r\n    >\r\n        <p \r\n\t        id=\"quote\" \r\n\t        style={props.style}\r\n        >\r\n        \t\"{props.quote}\"\r\n        </p>\r\n        <p \r\n        \tid=\"author\" \r\n        \tstyle={props.style}\r\n        >\r\n        \t- {props.author}\r\n        </p>\r\n    </div>\r\n)\r\n\r\nexport default QuoteBox","import * as React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\r\nimport Button from './components/button'\r\nimport QuoteBox from './components/quoteBox'\r\n\r\nimport './App.scss';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            quote: '',\r\n            author: '',\r\n            color: '',\r\n            href: ''\r\n        }\r\n    this.newQuote = this.newQuote.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.newQuote();\r\n    }\r\n    newQuote() {    \r\n        const url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const random = randomIndex(data.quotes.length);\r\n            this.setState({\r\n                quote: data.quotes[random].quote,\r\n                author: data.quotes[random].author,\r\n                color: colors[randomIndex(colors.length)]\r\n            });  \r\n        });\r\n        const encodedQuote = encodeURIComponent(`${this.state.quote} ${this.state.author}`);\r\n        const href = `https://twitter.com/intent/tweet?hashtags=quotes&text=${encodedQuote}`;\r\n        this.setState({\r\n            href: href\r\n        });\r\n    }\r\n  \r\n    render() {\r\n        const backgroundColorStyle = {\r\n            backgroundColor: this.state.color\r\n        };\r\n        return (\r\n            <div id=\"wrapper\" style={backgroundColorStyle}>\r\n                <div id=\"quote-box\">\r\n                    <QuoteBox quote={this.state.quote} \r\n                        author={this.state.author} \r\n                        id=\"text\" \r\n                        style={{color: this.state.color}}\r\n                    />\r\n                    <div id=\"buttons\">\r\n                        <a href={this.state.href} \r\n                            target=\"_top\" \r\n                            id=\"tweet-quote\" \r\n                            style={backgroundColorStyle}\r\n                        >\r\n                            <FontAwesomeIcon icon={faTwitter} />\r\n                        </a>            \r\n                        <Button id=\"new-quote\" \r\n                            handleClick={this.newQuote} \r\n                            value=\"New quote\" \r\n                            style={backgroundColorStyle}\r\n                        />\r\n                    </div> \r\n                </div> \r\n            </div> \r\n        )\r\n    }  \r\n}\r\n\r\nexport default App;\r\n\r\nconst colors = [\r\n  '#16a085',\r\n  '#27ae60',\r\n  '#2c3e50',\r\n  '#f39c12',\r\n  '#e74c3c',\r\n  '#9b59b6',\r\n  '#FB6964',\r\n  '#342224',\r\n  '#472E32',\r\n  '#BDBB99',\r\n  '#77B1A9',\r\n  '#73A857'\r\n];\r\n\r\nfunction randomIndex(length) {\r\n    return Math.floor(Math.random() * (length));\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}